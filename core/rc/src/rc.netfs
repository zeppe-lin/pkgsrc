#!/bin/sh
#
# /etc/rc.d/netfs: mount network volumes
#

case $1 in
start)
	# The following line mounts all entries in fstab that have the
	# _netdev option.  This is required for network filesystems to
	# be mounted at boot time.
	mount -a -O _netdev
	;;
stop)
	# The following line obtains a list from the output of mount
	# for all netfs types and anything that was mounted with the
	# _netdev option.
	_NETMOUNTS=$(mount                                           \
	             | grep '_netdev\|smbfs\|ncpfs\|code\|nfs\|cifs' \
	             | cut -d " " -f 3                               \
	             | sed ':a;$!N;s/\n/ /;ta')

	# Check to see if anything was listed from above
	# (see if anything actually needs to be mounted).
	if [ x"$_NETMOUNTS" = x ]; then
		echo "No network volumes mounted"
	else
		# There is something mounted.

		# Try and stop processes the nice way
		# (probably won't work in most cases).
		fuser -SIGTERM -km $_NETMOUNTS > /dev/null

		# Check and see if it found anything.  If it did, then
		# give 3 seconds for things to exit the nice way
		# before killing them off.
		# This one will work all of the time!
		if [ $? = 0 ]; then
			sleep 3
			fuser -km $_NETMOUNTS > /dev/null
		fi

		# We now need to unmount all network filesystems.  We
		# will do this with two umount commands to allow for
		# broken behaviour of smbmount, and also to make
		# certain that netmounts without the _netdev option
		# will still get unmounted.
		umount -a -f -O _netdev
		
		# Save the return value.
		NERRVAL=$?
			
		# Now catch the rest of the network filesystems by
		# fstype.  This list can be extended later as more
		# network filesystems are supported by mount.
		umount -a -f -t coda,ncpfs,nfs,smbfs,nfsd,cifs

		if [ $? = 0 ] && [ $NERRVAL = 0 ]; then
			(exit 0)
		else
			(exit 1)
		fi
	fi
	;;
*)
	echo "$0 [start|stop]"
	exit 1
	;;
esac

# End of file.
